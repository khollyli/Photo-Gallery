/* The asterisk (*) can be used to select any and all types of elements in an HTML page */
* {
    box-sizing: border-box;
}

body {
    margin: 0;
    font-family: sans-serif;
    background-color: #f5f6f7;
}

.header {
    text-align: center;
    text-transform: uppercase;
    padding: 32px;
    background: #0a0a23;
    color: #fff;
    border-bottom: 4px solid #fdb347;
}

.gallery {
    /* Flexbox is a one-dimensional CSS layout that can control the way
    items are spaced out and aligned within a container.
    To use it, give an element a 'display' property of 'flex'. This will
    make the element a 'flex container'. Any direct children of a flex
    container are called 'flex items'.
    .gallery is now a flex container */
    display: flex;
    /* Flexbox has a main and cross axis. The main axis is defined by the 'flex-direction' property,
    which has four possible values:
    - row (default): horizontal axis with flex items from left to right
    - row-reverse: horizontal axis with flex items from right to left
    - column: vertical axis with flex items from top to bottom
    - column-reverse: vertical axis with flex items from bottom to top */
    flex-direction: row;
    /* The 'flex-wrap' property determines how your flex items behave
    when the flex container is too small. Setting it to 'wrap' will allow the
    items to wrap to the next row or column. 'nonwrap' (default) will
    prevent your items from wrapping and shrink them if needed. */
    flex-wrap: wrap;
    /* The 'justify-content' property determines how the
    items inside a flex container are positioned along the main axis,
    affecting their position and the space around them. */
    justify-content: center;
    /* The 'align-items property position the flex content along the cross axis.
    In this case, with your 'flex-direction' set to 'row', your cross axis would be vertical. */
    align-items: center;
    padding: 20px 10px;
    max-width: 1400px;
    margin: 0 auto;
    /* The 'gap' CSS shorthand property sets the gaps, also known as gutters,
    between rows and columns. The 'gap' property and its 'row-gap' and 'column-gap'
    sub-properties provide this functionality for flex, grid, and multi-column layout.
    You apply the property to the container */
    gap: 16px;
}

/* Class selector | To select elements in a div with a class selector */
.gallery img {
    width: 100%;
    max-width: 350px;
    height: 300px;
    /* Rather than seeting each aspect ratio individually, you can use the 'object fit' property
    to determine how images should behave.
    This will tell the image to fill the 'img' container while maintaining aspect ratio,
    resulting in cropping to fit. */
    object-fit: cover;
    border-radius: 10px;
}

/* The '::after' pseudo-element creates an element that is the last
child of the selected element. You can use it to add an empty
element after the last image. If you give it the same 'width' as the
images, it will push the last image to the left when the gallery is in a
two-column layout. Right now, it is in the center because you set
'justify-content: center' on the flex container. */
.gallery::after {
    content: "";
    width: 350px;
}
